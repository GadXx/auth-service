services:

  postgres:
    container_name: postgres_container
    image: postgres:${POSTGRES_VERSION}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - auth
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  migrate:
    image: migrate/migrate
    depends_on:
      postgres:
        condition: service_healthy
    command: [
      "-path", "/migrations",
      "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable",
      "up"
    ]
    volumes:
      - ./migrations:/migrations
    networks:
      - auth

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - auth
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]

  auth:
    build:
      context: .
      dockerfile: deployments/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    env_file:
      - ./.env
    networks:
      - auth 
    ports:
      - "8080:8080"

networks:
  auth:
    driver: bridge

volumes:
  pgdata: